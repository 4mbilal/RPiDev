1-	Native compilation of OCV on Raspberry Pi takes a really long time. On the newer versions (4.0), it fails at 99% due to memory exhaustion. Two probable sources of problem were identified.
a.	Low voltage (powering through PC USB)
b.	Small Swap space.
These were rectified. Memory swap area was increased (see below). After these changes, compilation sees it to the end. 
Cross-compilation seemed liked a good idea it BUT it turned out to be REALLY hard. Wasted full 2 days without luck on Ubuntu-based host PC. Settings related to Neon and FP optimizations were just not being set. Tried Ubuntu on virtual machine as well as normal installation. Tried on docker container. Followed at least 4,5 different guides. At last, decided to try native installation once again with the two fixes mentioned above.

2-	Install TBB. 

cd ~/Downloads
wget https://github.com/01org/tbb/archive/2019_U5.tar.gz
tar xvzf 2019_U5.tar.gz
cd tbb-2019_U5
make tbb CXXFLAGS="-DTBB_USE_GCC_BUILTINS=1 -D__TBB_64BIT_ATOMICS=0"

cd ~/Downloads
mkdir libtbb-dev_armhf
cd libtbb-dev_armhf
mkdir -p usr/local/lib/pkgconfig
mkdir -p usr/local/include
mkdir DEBIAN

cd ~/Downloads/libtbb-dev_armhf/DEBIAN
cat > control
Package: libtbb-dev
Priority: extra
Section: universe/libdevel
Maintainer: Your Name <email address>
Architecture: armhf
Version: 2019
Homepage: http://threadingbuildingblocks.org/
Description: parallelism library for C++ - development files
 TBB is a library that helps you leverage multi-core processor
 performance without having to be a threading expert. It represents a
 higher-level, task-based parallelism that abstracts platform details
 and threading mechanism for performance and scalability.
 .
 (Note: if you are a user of the i386 architecture, i.e., 32-bit Intel
 or compatible hardware, this package only supports Pentium4-compatible
 and higher processors.)
 .
 This package includes the TBB headers, libs and pkg-config

Press Ctrl-D to save this file

cd ~/Downloads/libtbb-dev_armhf/usr/local/lib
cp ~/Downloads/your download directory/build/*_release/libtbb.so.2 .
ln -s libtbb.so.2 libtbb.so

cd ~/Downloads/your download directory/include
cp -r serial tbb ~/Downloads/libtbb-dev_armhf/usr/local/include

cd ~/Downloads/libtbb-dev_armhf/usr/local/lib/pkgconfig
cat > tbb.pc
# Manually added pkg-config file for tbb - START
prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: tbb
Description: thread building block
Version: 4.4.5
Cflags: -I${includedir} -DTBB_USE_GCC_BUILTINS=1 -D__TBB_64BIT_ATOMICS=0
Libs: -L${libdir} -ltbb
# Manually added pkg-config file for tbb - END

Press Ctrl-D to save this file

cd ~/Downloads
sudo chown -R root:staff libtbb-dev_armhf
sudo dpkg-deb --build libtbb-dev_armhf

sudo dpkg -i ~/Downloads/libtbb-dev_armhf.deb
sudo ldconfig

$At this point, TBB has been installed. Check installation by compiling the following cpp program.
cat > hello_world.cpp
#include "tbb/tbb.h"
#include <iostream>
using namespace tbb;
using namespace std;

class first_task : public task { 
 public: 
 task* execute( ) { 
 cout << "Hello World!\n";
 return NULL;
 }
};

int main( )
{ 
 task_scheduler_init init(task_scheduler_init::automatic);
 first_task& f1 = *new(tbb::task::allocate_root()) first_task( );
 tbb::task::spawn_root_and_wait(f1);
}
^D
g++ hello_world.cpp `pkg-config tbb --cflags --libs`
./a.out

3-	Install OpenCV
sudo apt-get update
sudo apt-get upgrade
configure swap and GPU memory allocation
sudo nano /etc/dphys-swapfile
CONF_SWAPFACTOR=2
Comment all other options
sudo /etc/init.d/dphys-swapfile stop
sudo /etc/init.d/dphys-swapfile start
verify 
free -m
Warning: memory swapping will wear out your SD card. Do not put your swap file on a SD card unless absolutely necessary. For example, you might want to revert your swapfile settings back to their default values after you're done installing OpenCV.
adjust GPU memory
sudo nano /boot/config.txt
gpu_mem=128

Install dependencies
sudo apt-get install build-essential cmake pkg-config
sudo apt-get install libjpeg-dev libtiff-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev
sudo apt-get install libgtk2.0-dev libgtk-3-dev
sudo apt-get install libatlas-base-dev gfortran

Install Python
sudo apt-get install python3-dev
sudo apt-get install python3-pip

Download latest OpenCV sources + Contrib_Modules

install Numpy and Scipy
sudo pip3 install numpy scipy

Compile OpenCV
cd ~/opencv/
mkdir build
cd build

cmake -DCMAKE_CXX_FLAGS="-DTBB_USE_GCC_BUILTINS=1 -D__TBB_64BIT_ATOMICS=0" -DENABLE_VFPV3=ON -DENABLE_NEON=ON -DBUILD_TESTS=OFF -DWITH_TBB=ON -DCMAKE_BUILD_TYPE=Release -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-4.0.0/modules -D WITH_FFMPEG=ON -D WITH_GSTREAMER=ON -DCMAKE_INSTALL_PREFIX=/usr/local -DINSTALL_PYTHON_EXAMPLES=OFF -DOPENCV_ENABLE_NONFREE=ON -DCMAKE_SHARED_LINKER_FLAGS=-latomic -DBUILD_EXAMPLES=OFF ..

make -j 4

Install now or first prepare the package using checkinstall (below)
sudo make install
sudo ldconfig

Prepare package
sudo apt-get install checkinstall //works on jessie, not on stretch (newer version). Solution is below.
git clone https://github.com/giuliomoro/checkinstall
cd checkinstall
make install

echo "opencv 4.1.0 build_rpi3_release_fp_tbb" > description-pak
echo | sudo checkinstall -D --install=no --pkgname=opencv --pkgversion=4.1.0 --provides=opencv --nodoc --backup=no --exclude=$HOME

Install
sudo dpkg -i opencv_4.1.0-1_armhf.deb
sudo ldconfig

Reset memory swap space to 100 MB

4-	OpenCV 4 does not install a dpkg. Thus, OpenCV library is not immediately visible. Solution is to either manually make a .pc file or just use cmakelists.txt. Using the latter solution. 
5-	Include -O2 option in cmake. Otherwise code is at least x2 slower. 
